---

- name: Create a sandbox instance
  hosts: localhost
  connection: local
  #ansible_python_interpreter: python
  #gather_facts: False

  # vars:
  #   key_name: my_keypair
  #   instance_type: m1.small
  #   security_group: my_securitygroup
  #   image: my_ami_id
  #   region: us-east-1

  environment:
    #PATH: ~/.local/bin:{{ ansible_env.PATH }}
    PATH: "{{ ansible_env.PATH }}:~/.local/bin"

  pre_tasks:
    - include_vars: iTrustVars.yml

  tasks:
    - name: Update repositories cache and install pip package
      apt:
        name: python-pip
        #upgrade: dist
        update_cache: yes
      become: true

    - name: pip install awscli --user --upgrade
      pip:
       name: boto
      become: true

    - name: pip install awscli --user --upgrade
      pip:
       name: awscli
       extra_args: --user --upgrade

    # - name: Checks if the environment file already has an entry for the PATH
    #   replace: dest=~/.profile regexp="PATH=(.*)" replace="PATH=\1"
    #   register: checkIfPATHIsHere
    #
    # - name: Add a PATH entry with {{extrapath}} if the PATH is not already defined
    #   lineinfile: dest=~/.profile state=present line="PATH={{aws_cli_path}}" regexp='' insertafter=EOF
    #   when: checkIfPATHIsHere.changed == false
    #
    # - name: add {{extrapath}} to the PATH
    #   lineinfile: dest=~/.profile state=present backrefs=no regexp="PATH=(["])((?!.?{{aws_cli_path}}).?)(["])$" line="PATH=\1\2:{{extra_path}}\3"
    #   when: checkIfPATHIsHere.changed


    - name: Launch jenkins server
      ec2:
         key_name: "{{ ec2_keypair }}" #"{{ lookup('env','aws_access_key_id') }}"
         group: "{{ ec2_security_group }}"
         instance_type: "{{ ec2_instance_type }}"
         image: "{{ ec2_image }}"
         wait: true
         region: "{{ ec2_region }}"
         vpc_subnet_id: "{{ ec2_subnet_ids|random }}"
         instance_tags: '{"Name":"Jenkins","Type":"iTrust"}'
         assign_public_ip: yes
         exact_count: 1
         count_tag:
           Name: "Jenkins"
           Type: "iTrust"
         volumes:
           - device_name: /dev/sda1
             device_type: gp2
             volume_size: 10
             delete_on_termination: true
      register: iTrust_BS #BuildServers

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: iTrust_jenkins
      with_items: "{{ iTrust_BS.tagged_instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 20
        timeout: 320
        state: started
      with_items:
        - "{{ iTrust_BS.tagged_instances }}"


    - debug: var=iTrust_BS  #msg="{{ ansible_env.PATH }}"


- name: Setup jenkins server
  hosts: iTrust_jenkins
  gather_facts: False

  vars:
    - my_jenkins_params:
        url_username: admin
    - oracle_java_version: 8
    - oracle_java_home: "/usr/lib/jvm/java-{{ oracle_java_version }}-oracle"
    - home_path: /home/ubuntu

  tasks:
    - name: Install Python #https://gist.github.com/gwillem/4ba393dceb55e5ae276a87300f6b8e6f
      raw: test -e /usr/bin/python || (sudo apt -y update && sudo apt install -y python-minimal)
      become: yes

    - name: Install required system packages.
      apt: pkg={{ item }} state=present update-cache=yes
      with_items:
        - sshpass
        - software-properties-common
        - python-dev
        - python-pip
        - apt-transport-https
        - ca-certificates
        - gcc
        - python-setuptools
        - git-core
        - python-setuptools
        - libffi-dev
        - libssl-dev
      become: yes

    - name: upgrade pip
      shell: pip install --upgrade pip
      become: yes

    # To get latest ansible, updgrade needed (https://github.com/ansible/ansible/issues/31741)
    - name: install setuptools
      become: yes
      pip:
        name: setuptools
        extra_args: --upgrade pip
      ignore_errors: True

    - name: install pyopenssl
      become: yes
      pip:
        name: pyopenssl
      ignore_errors: True

    - name: install ndg-httpsclient
      become: yes
      pip:
        name: ndg-httpsclient
      ignore_errors: True

    - name: install pyasn1
      become: yes
      pip:
        name: pyasn1
      ignore_errors: True


    - name: Install software-properties-common
      become: yes
      apt:
        name: software-properties-common
        update_cache: yes

    - apt_repository:
        repo: 'ppa:ansible/ansible'
      become: yes

    - name: Install Ansible
      become: yes
      apt:
        name: ansible
        update_cache: yes

    - name: Install dos2unix
      become: yes
      apt:
        name: dos2unix
        update_cache: yes

    # Java for jenkins
    - name: Adding Java ppa
      apt_repository:
        repo: ppa:webupd8team/java
        state: present
      become: yes

    - name: Accept Java license
      debconf: name='oracle-java{{ oracle_java_version }}-installer' question='shared/accepted-oracle-license-v1-1' value='true' vtype='select'
      become: yes

    - name: Install Java {{ oracle_java_version }} and set it as default version
      apt:
        name: oracle-java{{ oracle_java_version }}-installer
        state: latest
        cache_valid_time: 3600
        update_cache: yes
      become: yes

    - name: set Java {{ oracle_java_version }} as default version
      apt:
        name: oracle-java{{ oracle_java_version }}-set-default
        state: latest
        update_cache: yes
      become: yes

    - name: upgrade and update the system
      become: yes
      apt:
        upgrade: dist
        update_cache: yes

    #Install nodejs latest
    # - name: Add Nodesource apt key.
    #   apt_key:
    #     url: https://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0x1655A0AB68576280
    #     id: "68576280"
    #     state: present
    #
    # - name: Add NodeSource repositories for Node.js.
    #   apt_repository:
    #     repo: "{{ item }}"
    #     state: present
    #   with_items:
    #     - "deb https://deb.nodesource.com/node_6.x trusty main"
    #   register: node_repo
    #
    # - name: Update apt cache if repo was added.
    #   apt: update_cache=yes
    #   when: node_repo.changed
    #
    # - name: Ensure Node.js and npm are installed.
    #   apt: "name=nodejs=6* state=present"


    #Jenkins
    - name: Add Jenkins public key
      become: yes
      apt_key:
        url: "https://pkg.jenkins.io/debian-stable/jenkins.io.key"
        state: present

    - name: Add jenkins repo to the repo/source list
      become: yes
      apt_repository:
        repo: "deb https://pkg.jenkins.io/debian-stable binary/"
        state: present

    - name: Install Jenkins package
      become: yes
      apt:
        update_cache: yes
        pkg: jenkins
        state: present

    - name: Install python-jenkins and python-lxml
      become: yes
      apt:
        update_cache: yes
        pkg: "{{item}}"
        state: present
      with_items:
        - python-jenkins
        - python-lxml

    # Set home path for the machine running
    - set_fact:
        home_var: "{{ lookup('env','HOME') }}"

    - pause:
        seconds: 15

    - name: get admin pass and register it
      shell: "cat /var/lib/jenkins/secrets/initialAdminPassword"
      register: admin_pass
      tags:
        - test
      become: yes

    - debug:
        msg: "{{ admin_pass.stdout }}"

    # SKIPS THE WIZARD
    - name: Configure JVM Arguments
      become: yes
      lineinfile:
        dest: /etc/default/jenkins
        regexp: '^JAVA_ARGS='
        line: 'JAVA_ARGS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false"'

#restarting jenkins service to apply the changes in the config above
    - name: Restart Jenkins
      become: yes
      service:
        name: jenkins
        state: restarted
#
#
# #wait for jenkins to come back
    - name: Wait for Jenkins to start up
      wait_for: timeout=120
      delegate_to: localhost

    - debug:
        var: my_jenkins_params.url_username

    - set_fact:
       new_params: "{{ my_jenkins_params }}" # |combine({'url_password':'{{ admin_pass.stdout }}'}, recursive=True)

    - set_fact:
       URL: "http://{{ ansible_ssh_host }}:8080"


    - set_fact:
       new_jenkins_params: "{{ new_params|combine({'url':URL}, recursive=True) }}"

    # Commented out b/c we do not want password to show on console
    - debug:
       var: new_jenkins_params

#install custom in-build available jenkin plugins

    - name: Install jenkin subversion plugin
      jenkins_plugin:
        name: subversion
        params: "{{new_params}}"
        url_password: "{{admin_pass.stdout}}"
        url: "{{URL}}"



    - name: Install jenkin github branch source plugin
      jenkins_plugin:
        name: github-branch-source
        params: "{{new_params}}"
        url_password: "{{admin_pass.stdout}}"
        url: "{{URL}}"

    - name: Install jenkin ssh-slaves plugin
      jenkins_plugin:
        name: ssh-slaves
        params: "{{new_params}}"
        url_password: "{{admin_pass.stdout}}"
        url: "{{URL}}"

    - name: Install jenkin antplugin
      jenkins_plugin:
        name: ant
        params: "{{new_params}}"
        url_password: "{{admin_pass.stdout}}"
        url: "{{URL}}"

    - name: Install jenkin workflow-aggregator
      jenkins_plugin:
        name: workflow-aggregator
        params: "{{new_params}}"
        url_password: "{{admin_pass.stdout}}"
        url: "{{URL}}"

    - name: Install jenkin pipeline-github-lib
      jenkins_plugin:
        name: pipeline-github-lib
        params: "{{new_params}}"
        url_password: "{{admin_pass.stdout}}"
        url: "{{URL}}"

    - name: Install jenkin postbuild task plugin
      jenkins_plugin:
        name: postbuild-task
        params: "{{new_params}}"
        url_password: "{{admin_pass.stdout}}"
        url: "{{URL}}"

# restart jenkins once plugins are installed

    - name: Restart Jenkins
      become: yes
      service:
        name: jenkins
        state: restarted


#wait for jenkins to come back
    - name: Wait for Jenkins to start up
      wait_for: timeout=120
      delegate_to: localhost

    #setup jenkins user to have sudo no passwd
    - name: Make sure we have a 'wheel' group
      become: yes
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      become: yes
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: visudo -cf %s


    - name: Add jenkins users to wheel group
      become: yes
      user:
        name: jenkins
        groups: "wheel, ssh"
        append: yes
        #update_password: always
        #password: $6$12346789$LOJiuxAUNIEROWh9H4rZ6Stctr1huDh7UT4uzN5yx/tjmTGIlMb4CXNSdRfKPZWaNjR5rgX1ixKcveEE8REFU.
      tags:
        - wheel

    - name: Add root users to wheel group
      become: yes
      user:
        name: root
        groups: "wheel"
        append: yes

# restart jenkins once plugins are installed

    - name: Restart Jenkins
      become: yes
      service:
        name: jenkins
        state: restarted


#wait for jenkins to come back
    - name: Wait for Jenkins to start up
      wait_for: timeout=120
      delegate_to: localhost

    - name: Downloading Jenkins CLI Jar
      get_url:
        url: "http://{{ansible_ssh_host}}:8080/jnlpJars/jenkins-cli.jar"
        dest: "{{home_path}}/"
        mode: 0755

    # iTRUST JOB
    - name: Checking Job List For iTrust
      become: true
      shell: "java -jar {{home_path}}/jenkins-cli.jar -s http://{{ ansible_ssh_host }}:8080 list-jobs --username admin --password {{ admin_pass.stdout }}"
      register: iTrust
      changed_when: "iTrust.stdout.find('iTrust') == -1"

    - name: Copying iTrust Job XML
      copy:
        src:  iTrust.xml
        dest: "{{home_path}}/iTrust.xml"

    - name: Create Jenkins Jobs for iTrust Using XML
      become: true
      shell: "java -jar {{home_path}}/jenkins-cli.jar -s http://{{ ansible_ssh_host }}:8080 create-job iTrust < {{home_path}}/iTrust.xml --username admin --password {{admin_pass.stdout}}"
      when: "iTrust.stdout.find('iTrust') == -1"

    - name: Removing iTrust XML file
      file:
        path: "{{home_path}}/iTrust.xml"
        state: absent

    - name: make sure home/Deployment exists
      file:
        path: "{{home_path}}/Deployment"
        state: directory

    - name: copy over all files in the deployment folder
      copy:
        src:  ./ #"{{ item }}"
        dest: "{{home_path}}/Deployment"
      #with_fileglob:
        #- ./*

    - name: remove install_jenkins from machine
      file:
        path: "{{home_path}}/Deployment/install_jenkins.yml"
        state: absent

    - name: copy over environment variables source file
      copy:
        src: secret_iam.env
        dest: "{{home_path}}/secret_iam.env"
        #mode: 0777

    - name: Dos2Unix of source file
      shell: dos2unix "{{home_path}}/secret_iam.env"
      become: yes
    
    - include_role:
        name: python
    
      
    - include_role:
        name: Monitoring
      vars: 
        device_name: "newrelic-infra.yml.jenkins.j2"

